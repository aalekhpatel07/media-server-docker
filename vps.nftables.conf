# Assume a wg interface and a tunnel is set up and the upstream that would like
# to receive the incoming traffic transparently is at 10.10.10.10:8002.

table ip nat {
	# DNAT inbound packets from the internet.
	chain prerouting {
		# "type nat": This chain will perform NAT.
		# "hook prerouting": The packets will be looked at before they're routed anywhere.
		# "priority dstnat": Corresponds to NF_IP_PRI_NAT_DST means a rule must be applied about around the same priority that the other dnat's are done.
		# "policy accept": Let the packet go through if it matches the following constraints:
		type nat hook prerouting priority dstnat; policy accept;
		# iif "eth0": The packet must come in from the interface called "eth0" (i.e. packets inbound from the internet).
		# tcp: The packet must be a TCP packet.
		# "dport { 80, 443 }": The packet must be meant for ports 80 and 443.

		# "dnat to <ip>:port": Then DNAT it to a remote ip:port.
		iif "eth0" tcp dport { 80, 443 } dnat to 10.10.10.10:8002
	}

	# SNAT outbound packets meant for the Wireguard tunnel.
	chain postrouting {
		
		# "type nat": This chain will perform NAT.
		# "hook postrouting": The packets will be looked at after a decision has been made on which destination ip they're meant for.
		# "priority srcnat": corresponds to NF_IP_PRI_NAT_SRC means a rule must be applied about around the same priority that the other snat's are done.
		# "policy accept": Let the packet go through if it matches the following constraints:
		type nat hook postrouting priority srcnat; policy accept;
		# oif "wg": The packet must be going out on the interface called "wg" (i.e. packets sent to the Wireguard Tunnel).
		# ip daddr 10.10.10.10: The packet must be destined to go to 10.10.10.10.
		
		# masquerade: Then SNAT it.
		oif "wg" ip daddr 10.10.10.10 masquerade
	}
}

